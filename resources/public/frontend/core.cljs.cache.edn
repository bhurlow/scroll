;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name frontend.core, :imports nil, :requires {om om.core, om.core om.core, r cljs.reader, cljs.reader cljs.reader, xhr goog.net.XhrIo, goog.net.XhrIo goog.net.XhrIo, dom om.dom, om.dom om.dom}, :uses nil, :defs {->t_frontend$core18655 {:protocol-inline nil, :meta {:anonymous true, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([stream data owner meta18656])), :file nil}, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name frontend.core/->t_frontend$core18655, :variadic false, :file "src/frontend/core.cljs", :method-params ([stream data owner meta18656]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 36, :max-fixed-arity 4, :fn-var true, :arglists (quote ([stream data owner meta18656])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_frontend$core18655 {:num-fields 4, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name frontend.core/t_frontend$core18655, :file "src/frontend/core.cljs", :type true, :anonymous true, :column 3, :line 36, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, request {:protocol-inline nil, :meta {:file "/Users/pretzel/code/scroll/src/frontend/core.cljs", :line 11, :column 7, :end-line 11, :end-column 14, :arglists (quote ([url callback]))}, :name frontend.core/request, :variadic false, :file "src/frontend/core.cljs", :end-column 14, :method-params ([url callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 2, :fn-var true, :arglists (quote ([url callback]))}, ->t_frontend$core18648 {:protocol-inline nil, :meta {:anonymous true, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([stream data owner meta18649])), :file nil}, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name frontend.core/->t_frontend$core18648, :variadic false, :file "src/frontend/core.cljs", :method-params ([stream data owner meta18649]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 36, :max-fixed-arity 4, :fn-var true, :arglists (quote ([stream data owner meta18649])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_frontend$core18640 {:protocol-inline nil, :meta {:anonymous true, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([containers data owner meta18641])), :file nil}, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name frontend.core/->t_frontend$core18640, :variadic false, :file "src/frontend/core.cljs", :method-params ([containers data owner meta18641]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 25, :max-fixed-arity 4, :fn-var true, :arglists (quote ([containers data owner meta18641])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_frontend$core18633 {:num-fields 4, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name frontend.core/t_frontend$core18633, :file "src/frontend/core.cljs", :type true, :anonymous true, :column 3, :line 25, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_frontend$core18640 {:num-fields 4, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name frontend.core/t_frontend$core18640, :file "src/frontend/core.cljs", :type true, :anonymous true, :column 3, :line 25, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, containers {:protocol-inline nil, :meta {:file "/Users/pretzel/code/scroll/src/frontend/core.cljs", :line 24, :column 7, :end-line 24, :end-column 17, :arglists (quote ([data owner]))}, :name frontend.core/containers, :variadic false, :file "src/frontend/core.cljs", :end-column 17, :method-params ([data owner]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 2, :fn-var true, :arglists (quote ([data owner]))}, stream {:protocol-inline nil, :meta {:file "/Users/pretzel/code/scroll/src/frontend/core.cljs", :line 35, :column 7, :end-line 35, :end-column 13, :arglists (quote ([data owner]))}, :name frontend.core/stream, :variadic false, :file "src/frontend/core.cljs", :end-column 13, :method-params ([data owner]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 2, :fn-var true, :arglists (quote ([data owner]))}, t_frontend$core18648 {:num-fields 4, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name frontend.core/t_frontend$core18648, :file "src/frontend/core.cljs", :type true, :anonymous true, :column 3, :line 36, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, app-state {:name frontend.core/app-state, :file "src/frontend/core.cljs", :line 17, :column 1, :end-line 17, :end-column 15, :meta {:file "/Users/pretzel/code/scroll/src/frontend/core.cljs", :line 17, :column 6, :end-line 17, :end-column 15}}, ->t_frontend$core18633 {:protocol-inline nil, :meta {:anonymous true, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([containers data owner meta18634])), :file nil}, :protocols #{om.core/IRender cljs.core/IMeta cljs.core/IWithMeta}, :name frontend.core/->t_frontend$core18633, :variadic false, :file "src/frontend/core.cljs", :method-params ([containers data owner meta18634]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 25, :max-fixed-arity 4, :fn-var true, :arglists (quote ([containers data owner meta18634])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}}, :require-macros {om om.core, om.core om.core, dom om.dom, om.dom om.dom}, :cljs.analyzer/constants {:seen #{owner meta18634 data :Id :logs :name :val :streams :containers containers meta18649 :class stream :Names :target quote :arglists meta18656 meta18641}, :order [:streams :logs :containers :class :Id :Names containers :arglists quote data owner meta18634 meta18641 :name :val stream meta18649 meta18656 :target]}, :doc nil}